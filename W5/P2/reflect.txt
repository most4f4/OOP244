///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #5 (P2)
Full Name  : Mostafa Hasanalipourshahrabadi
Student ID#: 154581227
Email      : mhasanalipourshahrab@myseneca.ca
Section    : NAA
Date       : 2023-06-16

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

During this workshop, I have gained a good understanding of several important
topics related to operator overloading in C++. I have successfully learned how 
to define and create binary member operators, which allow me to perform custom 
operations between two objects of the class.

Furthermore, I have also learned how to define and create type conversion 
operators, which enable me to convert objects of my class to primitive types or 
other user-defined types. This feature provides flexibility and convenience when 
working with different data types.

In addition, I have explored unary member operators, which allow me to perform 
operations on a single object of the class. This is useful for implementing 
various operations that involve only one operand.

Moreover, I have learned how to define and create helper binary operators 
between classes. This allows me to define custom operations between objects of 
different classes, which enhances the versatility and reusability of my code.

Lastly, I have successfully defined and created helper operators between 
primitive types and my class. This means that I can perform operations between 
objects of my class and primitive types like integers, doubles, or characters, 
making my code more intuitive and easy to use.

Throughout the workshop, I encountered a few challenges. One difficulty I faced 
was ensuring that my operator implementations handled invalid states properly. 
For example, when dealing with marks outside the range of 0 to 100, I had to 
ensure that the mark was set to an invalid state and that any operations 
involving invalid marks were handled correctly.

Overall, this workshop has provided me with valuable knowledge and skills in 
operator overloading in C++. I now feel confident in my ability to define and 
create various operators, allowing for more expressive and efficient code.